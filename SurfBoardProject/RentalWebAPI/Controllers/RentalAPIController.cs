using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SurfBoardProject.Data;
using SurfBoardProject.Models;

namespace RentalWebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RentalAPIController : ControllerBase
    {
        private readonly SurfBoardProjectContext _context;
        private readonly UserManager<IdentityUser> _userManager;

        public RentalAPIController(SurfBoardProjectContext context, UserManager<IdentityUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        [HttpGet]
        public async Task<IActionResult> GetRentals()
        {
            try
            {
                var rentals = await _context.Rental.ToListAsync();
                return Ok(rentals);
            }
            catch (Exception ex)
            {
                return BadRequest(ex);
            }
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetRental(int id)
        {
            var rental = await _context.Rental.FindAsync(id);

            if (rental == null)
            {
                return NotFound();
            }

            return Ok(rental);
        }

        [HttpPost("{}")]
        public async Task<IActionResult> CreateRental(int id, [FromBody] RentalCustomer rentalCustomer)
        {
            var userId = _userManager.GetUserId(User);
            rentalCustomer.Customer.UserId = userId;

            var boardToUpdate = await _context.BoardModel.FirstOrDefaultAsync(m => m.Id == id);

            if (boardToUpdate != null)
            {
                if (boardToUpdate.IsAvailable == 0)
                {
                    ModelState.Remove("Rental.RowVersion");
                    if (ModelState.IsValid)
                    {
                        // Proceed with booking
                        boardToUpdate.IsAvailable = 1;

                        var newCustomer = new Customer
                        {
                            UserId = userId,
                            Name = rentalCustomer.Customer.Name,
                            LastName = rentalCustomer.Customer.LastName,
                            Email = rentalCustomer.Customer.Email,
                            PhoneNumber = rentalCustomer.Customer.PhoneNumber,
                            Rentals = new List<Rental>
                            {
                                new Rental
                                {
                                    Start = rentalCustomer.Rental.Start,
                                    End = rentalCustomer.Rental.End,
                                    Price = rentalCustomer.Rental.Price,
                                    // RowVersion will be generated by the database
                                    Boards = new List<BoardModel> { boardToUpdate }
                                }
                            }
                        };

                        _context.Customer.Add(newCustomer);

                        // SaveChangesAsync will handle concurrency conflicts
                        await _context.SaveChangesAsync();

                        return CreatedAtAction(nameof(GetRental), new { id = newCustomer.Rentals.First().RentalId }, newCustomer.Rentals.First());
                    }
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "The chosen board has already been booked by another user, please choose another board");
                }
            }
            else
            {
                ModelState.AddModelError(string.Empty, "Board not found.");
            }

            return BadRequest(ModelState);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateRental(int id, [FromBody] Rental rental)
        {
            if (id != rental.RentalId)
            {
                return BadRequest();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(rental);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!RentalExists(id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return NoContent();
            }

            return BadRequest(ModelState);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRental(int id)
        {
            var rental = await _context.Rental.FindAsync(id);
            if (rental == null)
            {
                return NotFound();
            }

            _context.Rental.Remove(rental);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool RentalExists(int id)
        {
            return _context.Rental.Any(e => e.RentalId == id);
        }
    }
}