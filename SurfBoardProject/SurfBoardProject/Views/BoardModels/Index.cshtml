@using SurfBoardProject.Utility;

@model PaginatedList<SurfBoardProject.Models.BoardModel>


@{
    ViewData["Title"] = "Index";
}

<h1>List of Boards</h1>
<br />
<p>
    <a asp-action="Create">
        <button class="btn btn-primary">Create New Board</button>
    </a>
</p>
<div class="container">
    <div class="row">

        <div class="col">
            <div class="sortDropdown">
                <form asp-action="Index" method="get">
                    <label for="sortOrder">Sort by:</label>
                    <select name="sortOrder" id="sortOrder">
                        <option value="@ViewData["BoardDescriptionSortParm"]">Sort by Type</option>
                        <option value="@ViewData["LengthSortParm"]">Sort by Length</option>
                        <option value="@ViewData["ShowBoardsWithEquip"]">Show Boards with Equipment</option>
                    </select>
                    <input type="submit" value="Sort" class="btn btn-secondary" />
                </form>
            </div>
        </div>

        <div class="col searchField">
            <form asp-action="Index" method="get" class="searchField">
                <div class="form-actions no-color">
                    <p>
                        <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
                        <input type="submit" value="Search" class="btn btn-default btn-outline-dark" />

                        <a asp-action="Index" class="btn btn-primary">Back to Full List</a>
                    </p>
                </div>
            </form>
        </div>

    </div>
</div>




<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Length)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Width)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Volume)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].BoardDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Price)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Equipment)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Length)


                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Width)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Volume)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BoardDescription)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Equipment)
                </td>
                <td>
                    <a class="btn btn-warning" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a class="btn btn-primary" asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.Id">Delete</a>

                    <form asp-controller="BoardModels" asp-action="ToggleAvailability" method="post" style="display: inline;">
                        <input type="hidden" name="itemId" value="@item.Id" />
                        <input type="hidden" name="isAvailable" value="@item.IsAvailable" />

                        <button type="submit" class="btn @(item.IsAvailable == 0 ? "btn-outline-primary" : "btn-success")">
                            @(item.IsAvailable == 0 ? "Available" : "Booked")
                        </button>

                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
<!-- "Previous" button with sorting, pagination, and filtering parameters -->
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["LengthSortParm"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   sp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default btn-outline-secondary @prevDisabled">
    Previous
</a>
<!-- "Next" button with sorting, pagination, and filtering parameters -->
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["LengthSortParm"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   class="btn btn-default btn-outline-success @nextDisabled">
    Next
</a>
