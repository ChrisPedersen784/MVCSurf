using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SurfBoardProject.Data;
using SurfBoardProject.Models;
using System.Text.Json;

namespace API.Controllers.V2
{
    [ApiController]
    [Route("api/rent")]
    [ApiVersion("2.0")]
    public class RentalV2Controller : ControllerBase
    {
        private readonly SurfBoardProjectContext _context;
        private readonly UserManager<IdentityUser> _userManager;

        public RentalV2Controller(SurfBoardProjectContext context, UserManager<IdentityUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        [HttpGet]
        public async Task<IActionResult> Book()
        {
            try
            {
                string[] lightVersion = { "The Minilog", "The Bomb", "Six Tourer" };
                var boardsLight = await _context.BoardModel.ToListAsync();

                // Serialize the list of boards to JSON
                var jsonSerialized = JsonSerializer.Serialize(boardsLight);

                // Return JSON response
                return Ok(jsonSerialized);
            }
            catch (Exception ex)
            {
                // Handle exceptions appropriately, e.g., log the error
                return BadRequest(ex.Message);
            }
        }


        [HttpPost("{id}/rent")]
        public async Task<IActionResult> CreateRental(int id, [FromBody] RentalCustomer rentalCustomer, [FromQuery] string userId)
        {
            rentalCustomer.Customer.UserId = userId;

            var boardToUpdate = await _context.BoardModel.FirstOrDefaultAsync(m => m.Id == id);

            if (boardToUpdate == null)
            {
                ModelState.AddModelError(string.Empty, "Board not found.");
                return BadRequest(ModelState);
            }

            if (boardToUpdate.IsAvailable == 0)
            {
                ModelState.Remove("Rental.RowVersion");

                if (ModelState.IsValid)
                {
                    // Proceed with booking
                    boardToUpdate.IsAvailable = 1;

                    var newRental = new Rental
                    {
                        Start = rentalCustomer.Rental.Start,
                        End = rentalCustomer.Rental.End,
                        Price = rentalCustomer.Rental.Price,
                        // RowVersion will be generated by the database
                        Boards = new List<BoardModel> { boardToUpdate }
                    };

                    var newCustomer = new Customer
                    {
                        UserId = userId,
                        Name = rentalCustomer.Customer.Name,
                        LastName = rentalCustomer.Customer.LastName,
                        Email = rentalCustomer.Customer.Email,
                        PhoneNumber = rentalCustomer.Customer.PhoneNumber,
                        Rentals = new List<Rental> { newRental }
                    };

                    _context.Customer.Add(newCustomer);

                    try
                    {
                        // SaveChangesAsync will handle concurrency conflicts
                        await _context.SaveChangesAsync();

                        return CreatedAtAction("Book", new { id = newRental.RentalId }, rentalCustomer);
                    }
                    catch (DbUpdateConcurrencyException)
                    {
                        ModelState.AddModelError(string.Empty, "Concurrency conflict occurred.");
                        return Conflict(ModelState);
                    }
                }
            }
            else
            {
                ModelState.AddModelError(string.Empty, "The chosen board has already been booked by another user, please choose another board");
            }

            return BadRequest(ModelState);
        }

    }
}
